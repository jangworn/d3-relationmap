(window.webpackJsonp=window.webpackJsonp||[]).push([["theme"],{"./app/theme.js":
/*!**********************!*\
  !*** ./app/theme.js ***!
  \**********************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('__webpack_require__(/*! ../assets/css/style.css */ "./assets/css/style.css");\n__webpack_require__(/*! ../assets/js/graph */ "./assets/js/graph.js");\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvdGhlbWUuanM/MzgwMiJdLCJuYW1lcyI6WyJyZXF1aXJlIl0sIm1hcHBpbmdzIjoiQUFBQSxtQkFBQUEsQ0FBUSx1REFBUjtBQUNBLG1CQUFBQSxDQUFRLGdEQUFSIiwiZmlsZSI6Ii4vYXBwL3RoZW1lLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZShcIi4uL2Fzc2V0cy9jc3Mvc3R5bGUuY3NzXCIpO1xucmVxdWlyZShcIi4uL2Fzc2V0cy9qcy9ncmFwaFwiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./app/theme.js\n')},"./assets/css/style.css":
/*!******************************!*\
  !*** ./assets/css/style.css ***!
  \******************************/
/*! no static exports found */function(module,exports){eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY3NzL3N0eWxlLmNzcz8xYjhlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ii4vYXNzZXRzL2Nzcy9zdHlsZS5jc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./assets/css/style.css\n")},"./assets/js/graph.js":
/*!****************************!*\
  !*** ./assets/js/graph.js ***!
  \****************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function($) {var network;\nvar allNodes;\nvar allEdges;\nvar highlightActive = false;\nvar nodesDataset;\nvar edgesDataset;\nvar data;\nvar opts = {\n    url: 'relation.json'\n};\n\nvar canvas = document.getElementById(\"map\"),\n    option = {\n    autoResize: !0,\n    nodes: {\n        shape: 'dot',\n        font: {\n            size: 12,\n            face: 'Microsoft YaHei'\n        }\n\n    },\n    edges: {\n        width: 0.15,\n        color: {\n            inherit: 'from'\n        },\n        smooth: {\n            type: 'continuous'\n        },\n        font: {\n            size: 10,\n            face: 'Microsoft YaHei',\n            align: 'middle'\n        }\n\n    },\n    physics: false,\n    interaction: {\n        tooltipDelay: 200,\n        hideEdgesOnDrag: true,\n        hoverConnectedEdges: true,\n        navigationButtons: true,\n        keyboard: true\n    }\n},\n    fmt = function (e) {\n    for (var node = {}, i = 0; i < e.length; i++) node[e[i].id] = e[i];\n    return node;\n};\n\nfunction draw() {\n    $('#load_data').show();\n    var url = opts.url;\n    var node = new vis.DataSet([]),\n        edge = new vis.DataSet([]);\n    network = new vis.Network(canvas, {\n        nodes: node,\n        edges: edge\n    }, option);\n    $.ajax({\n        cache: !0,\n        method: \"get\",\n        headers: {\n            \"Content-Type\": \"application/json; charset=UTF-8\"\n        },\n        url: url,\n        dataType: 'JSON',\n        success: function (e) {\n\n            if (e.code != 200) {\n                $('#load_data p').html('无数据');\n                return;\n            }\n            path = e.data.path;\n\n            $('#load_data p').html('画图中...');\n            for (var nodes = e.data.nodes, r = fmt(nodes), links = e.data.edges, a = 0; a < links.length; a++) {\n                links[a].source = r[links[a].from];\n                links[a].target = r[links[a].to];\n            }\n            var g = function (e, o) {\n                var t, r, n, a, i;\n                return a = 100, r = 60, n = 1e3 / r, i = function () {\n                    return Date.now();\n                }, t = e.tick, e.tick = function () {\n                    var r, l;\n                    for (r = i(), l = a; l-- && i() - r < n;) if (t()) return a = 2, !0;\n                    if (e.alpha() < .02) {\n                        e.stop();\n                        o ? o() : void 0;\n                    }\n                };\n            },\n                link = d3.layout.force().linkDistance(function (e) {\n                return 130;\n            }).charge(-2000).nodes(nodes).links(links);\n            g(link, function () {\n                $('#load_data').hide();\n                highlightActive = false;\n\n                nodesDataset = new vis.DataSet(nodes);\n                edgesDataset = new vis.DataSet(links);\n                data = {\n                    nodes: nodesDataset,\n                    edges: edgesDataset\n                };\n                allNodes = nodesDataset.get({\n                    returnType: \"Object\"\n                });\n                allEdges = edgesDataset.get({\n                    returnType: \"Object\"\n                });\n                network.setData(data);\n                network.on(\"click\", highlight);\n                network.on(\"doubleClick\", function (e) {\n                    console.log('double click nodeId:' + e.nodes);\n                });\n            });\n            link.start();\n        },\n        error: function () {\n            $('#load_data p').html('数据升级中...');\n        }\n    });\n}\n\ninitShow();\n\nfunction highlight(params) {\n\n    // if something is selected:\n    if (params && params.nodes.length > 0) {\n        highlightActive = true;\n        var i, j;\n        var selectedNode = params.nodes[0];\n        var degrees = 1;\n        if (allNodes[selectedNode].hcolor != 'rgba(200,200,200,0.5)' && allNodes[selectedNode].hcolor != undefined) {\n            allNodes[selectedNode].color = allNodes[selectedNode].hcolor;\n        }\n\n        // mark all nodes as hard to read.\n        for (var nodeId in allNodes) {\n            if (allNodes[nodeId].color != 'rgba(200,200,200,0.5)' && allNodes[nodeId].color != undefined) {\n                allNodes[nodeId].hcolor = allNodes[nodeId].color;\n            }\n            allNodes[nodeId].color = 'rgba(200,200,200,0.5)';\n            if (allNodes[nodeId].hiddenLabel === undefined) {\n                allNodes[nodeId].hiddenLabel = allNodes[nodeId].label;\n                allNodes[nodeId].label = undefined;\n            }\n        }\n        for (var edgeId in allEdges) {\n            allEdges[edgeId].color.hcolor = allEdges[edgeId].color.color;\n            allEdges[edgeId].color.color = 'rgba(200,200,200,0.5)';\n            allEdges[edgeId].color.opacity = '0.5';\n            if (allEdges[edgeId].font.color != 'rgba(200,200,200,0.5)' && allEdges[edgeId].font.color != undefined) {\n                allEdges[edgeId].font.hcolor = allEdges[edgeId].font.color;\n            }\n\n            allEdges[edgeId].font.color = 'rgba(200,200,200,0.5)';\n        }\n        var connectedNodes = network.getConnectedNodes(selectedNode);\n        var allConnectedNodes = [];\n\n        // get the second degree nodes\n        for (i = 1; i < degrees; i++) {\n            for (j = 0; j < connectedNodes.length; j++) {\n                allConnectedNodes = allConnectedNodes.concat(network.getConnectedNodes(connectedNodes[j]));\n            }\n        }\n\n        // all second degree nodes get a different color and their label back\n        for (i = 0; i < allConnectedNodes.length; i++) {\n            allNodes[allConnectedNodes[i]].color = allNodes[allConnectedNodes[i]].hcolor;\n            //allNodes[allConnectedNodes[i]].color = 'rgba(150,150,150,0.75)';\n            if (allNodes[allConnectedNodes[i]].hiddenLabel !== undefined) {\n                allNodes[allConnectedNodes[i]].label = allNodes[allConnectedNodes[i]].hiddenLabel;\n                allNodes[allConnectedNodes[i]].hiddenLabel = undefined;\n            }\n        }\n\n        // all first degree nodes get their own color and their label back\n        for (i = 0; i < connectedNodes.length; i++) {\n            allNodes[connectedNodes[i]].color = allNodes[connectedNodes[i]].hcolor;\n            if (allNodes[connectedNodes[i]].hiddenLabel !== undefined) {\n                allNodes[connectedNodes[i]].label = allNodes[connectedNodes[i]].hiddenLabel;\n                allNodes[connectedNodes[i]].hiddenLabel = undefined;\n            }\n        }\n\n        // the main node gets its own color and its label back.\n        allNodes[selectedNode].color = allNodes[selectedNode].hcolor;\n        if (allNodes[selectedNode].hiddenLabel !== undefined) {\n            allNodes[selectedNode].label = allNodes[selectedNode].hiddenLabel;\n            allNodes[selectedNode].hiddenLabel = undefined;\n        }\n        for (var edgeId in allEdges) {\n            if (allEdges[edgeId].from == selectedNode || allEdges[edgeId].to == selectedNode) {\n                allEdges[edgeId].color.color = allEdges[edgeId].color.hcolor;\n                allEdges[edgeId].font.color = allEdges[edgeId].font.hcolor;\n            }\n        }\n    } else if (highlightActive === true) {\n        // reset all nodes\n\n        for (var nodeId in allNodes) {\n            allNodes[nodeId].color = allNodes[nodeId].hcolor;\n            if (allNodes[nodeId].hiddenLabel !== undefined) {\n                allNodes[nodeId].label = allNodes[nodeId].hiddenLabel;\n                allNodes[nodeId].hiddenLabel = undefined;\n            }\n            for (var edgeId in allEdges) {\n                allEdges[edgeId].color.color = allEdges[edgeId].color.highlight;\n                allEdges[edgeId].font.color = allEdges[edgeId].font.hcolor;\n            }\n        }\n        highlightActive = false;\n    }\n\n    // transform the object into an array\n    var updateArray = [];\n    for (nodeId in allNodes) {\n        if (allNodes.hasOwnProperty(nodeId)) {\n            updateArray.push(allNodes[nodeId]);\n        }\n    }\n\n    var updateArray2 = [];\n    for (edgeId in allEdges) {\n        if (allEdges.hasOwnProperty(edgeId)) {\n            updateArray2.push(allEdges[edgeId]);\n        }\n    }\n\n    nodesDataset.update(updateArray);\n    edgesDataset.update(updateArray2);\n}\n\nfunction initShow() {\n\n    draw();\n    $('.vis-button.vis-zoomIn').html('<a type=\"button\" id=\"zoom-in\" class=\"btn btn-default btn-circle zoom-in\"><img src=\"./assets/img/Enlarge.png\"></a>');\n    $('.vis-button.vis-zoomOut').html(' <a type=\"button\"  id=\"zoom-out\" class=\"btn btn-default btn-circle zoom-out\"><img src=\"./assets/img/shrink.png\"></a>');\n    $('#button_box a.action').off('click').on('click', function () {\n\n        if ($('#handle_box')[0].style.display == 'none' || !$('#handle_box')[0].style.display) {\n            $('#handle_box').show();\n        } else {\n            $('#handle_box').hide();\n        }\n    });\n\n    $('#button_box a.download').off('click').on('click', function () {\n        download('jpg');\n    });\n    $('#button_box a.refresh').off('click').on('click', function () {\n        window.location.reload();\n    });\n\n    function download(type) {\n        var old_canvas = document.getElementById(\"map\").childNodes[0].firstChild;\n\n        var url = old_canvas.toDataURL(\"image/jpg\");\n        var canvas = document.createElement('canvas');\n        canvas.width = old_canvas.width;\n        canvas.height = old_canvas.height;\n        context = canvas.getContext(\"2d\");\n        var image = new Image();\n        image.src = url;\n        context.fillStyle = '#ffffff';\n        //draw background / rect on entire canvas\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        //image.src = document.getElementsByTagName('img')[0].src;  \n        image.onload = function () {\n            context.drawImage(image, 0, 0);\n            var a = document.createElement(\"a\");\n            a.download = new Date().toLocaleDateString() + '.' + type;\n            a.href = canvas.toDataURL(\"image/jpg\");\n            a.click();\n        };\n        return false;\n    }\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./assets/js/graph.js\n")}},[["./app/theme.js","manifest","common"]]]);